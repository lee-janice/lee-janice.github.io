{"version":3,"file":"component---src-pages-notes-letters-to-live-by-tsx-ff62f459b5a41ef994e8.js","mappings":"6MAKA,MAAMA,EAAcC,EAAAA,QAAOC,GAAEC,WAAA,CAAAC,YAAA,kCAAAC,YAAA,gBAATJ,CAAS,uCAKvBK,EAAiBL,EAAAA,QAAOM,GAAEJ,WAAA,CAAAC,YAAA,qCAAAC,YAAA,gBAATJ,CAAS,wCA2EhC,UAtEsCO,IAA2C,IAA1C,KAAEC,GAAmCD,EAGxE,IAAIE,EAAc,GAkBlB,OAjBAD,EAAKE,eAAeC,MAAMC,QAASC,IAC/BC,QAAQC,IAAIF,GACZA,EAAKG,KAAKP,OAAOG,QAASK,IAClBA,EAAMC,UACNT,EAAOU,KAAK,CACRC,aAAcP,EAAKG,KAAKI,aACxBC,YAAaR,EAAKG,KAAKK,YACvBC,MAAOT,EAAKG,KAAKM,MACjBL,MAAOA,EAAMA,MACbM,YAAaN,EAAMM,YACnBC,YAAaP,EAAMO,YACnBC,MAAOR,EAAMQ,YAOzBC,EAAAA,cAACC,EAAAA,EAAM,KACHD,EAAAA,cAAA,WAASE,UAAU,WACfF,EAAAA,cAAC3B,EAAW,KAAC,sBACb2B,EAAAA,cAACrB,EAAc,KAAC,gEAChBqB,EAAAA,cAAA,eACIA,EAAAA,cAAA,WACCjB,aAAM,EAANA,EACKoB,KAAK,CAACC,EAAQC,IAAWD,EAAET,YAAYW,cAAcD,EAAEV,cACxDY,IAAKhB,GACFA,EAAMA,MACFS,EAAAA,cAAA,WACIA,EAAAA,cAAA,QAAME,UAAU,MACZF,EAAAA,cAAA,UAAKT,EAAMK,OAAW,IAACI,EAAAA,cAAA,WAAM,IAAET,EAAMG,aAAa,IAAEH,EAAMI,YACzDJ,EAAMM,YAAcG,EAAAA,cAAA,WAAYA,EAAAA,cAAAA,EAAAA,SAAA,OAErCA,EAAAA,cAAA,SAAIT,EAAMA,OACVS,EAAAA,cAAA,YAEJ,UAgCzB,MAAMQ,EAAeA,IAAMR,EAAAA,cAAA,aAAO,U,+CCtEzC,IATgCnB,IAAA,IAAC,SAAE4B,GAAU5B,EAAA,OACzCmB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,YACIA,EAAAA,cAACU,EAAAA,EAAO,MACPD,I","sources":["webpack://lee-janice.github.io/./src/pages/notes/letters-to-live-by.tsx","webpack://lee-janice.github.io/./src/components/layout.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { graphql, Link, type HeadFC, type PageProps } from \"gatsby\";\nimport styled from \"styled-components\";\nimport Layout from \"../../components/layout\";\n\nconst StyledTitle = styled.h1`\n    margin-top: 0px;\n    margin-bottom: 2px;\n`;\n\nconst StyledSubtitle = styled.h2`\n    margin-top: 0px;\n    margin-bottom: 20px;\n`;\n\nconst LTLBPage: React.FC<PageProps> = ({ data }: PageProps<Queries.LTLBPage>) => {\n    // get all favorite quotes\n    // TODO: refactor - pretty sure i can do this better with flatMap\n    var quotes: any = [];\n    data.allReadingYaml.edges.forEach((note: any) => {\n        console.log(note);\n        note.node.quotes.forEach((quote: any) => {\n            if (quote.favorite) {\n                quotes.push({\n                    author_first: note.node.author_first,\n                    author_last: note.node.author_last,\n                    title: note.node.title,\n                    quote: quote.quote,\n                    page_number: quote.page_number,\n                    description: quote.description,\n                    notes: quote.notes,\n                });\n            }\n        });\n    });\n\n    return (\n        <Layout>\n            <article className=\"content\">\n                <StyledTitle>Letters to live by</StyledTitle>\n                <StyledSubtitle>A small selection of words well-strung âš¬ 6 of September 2025</StyledSubtitle>\n                <section>\n                    <hr />\n                    {quotes\n                        ?.sort((a: any, b: any) => a.author_last.localeCompare(b.author_last))\n                        .map((quote: any) =>\n                            quote.quote ? (\n                                <div>\n                                    <span className=\"mn\">\n                                        <em>{quote.title}</em> <br /> {quote.author_first} {quote.author_last}\n                                        {quote.page_number ? <br></br> : <></>}\n                                    </span>\n                                    <p>{quote.quote}</p>\n                                    <br />\n                                </div>\n                            ) : null\n                        )}\n                </section>\n            </article>\n        </Layout>\n    );\n};\n\nexport const query = graphql`\n    query WTLBPage {\n        allReadingYaml {\n            edges {\n                node {\n                    quotes {\n                        quote\n                        favorite\n                        page_number\n                        description\n                        notes\n                        tags\n                    }\n                    author_first\n                    author_last\n                    title\n                }\n            }\n        }\n    }\n`;\n\nexport default LTLBPage;\n\nexport const Head: HeadFC = () => <title>testing</title>;\n","import React from \"react\";\nimport SideBar from \"./sidebar\";\n\ninterface Props {\n    readonly title?: string;\n    readonly children: React.ReactNode;\n}\n\nconst Layout: React.FC<Props> = ({ children }) => (\n    <>\n        <main>\n            <SideBar />\n            {children}\n        </main>\n    </>\n);\n\nexport default Layout;\n"],"names":["StyledTitle","styled","h1","withConfig","displayName","componentId","StyledSubtitle","h2","_ref","data","quotes","allReadingYaml","edges","forEach","note","console","log","node","quote","favorite","push","author_first","author_last","title","page_number","description","notes","React","Layout","className","sort","a","b","localeCompare","map","Head","children","SideBar"],"sourceRoot":""}